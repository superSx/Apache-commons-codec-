class StringUtils
根据不同编码格式，实现字符串和字节数组的相互转换。
包含主要方法
字符串至字节数组
byte[] getBytesIso8859_1(final String string)；
byte[] getBytesUnchecked(final String string, final String charsetName)；
byte[] getBytesUsAscii(final String string)；
byte[] getBytesUtf16(final String string)；
byte[] getBytesUtf16Be(final String string)；
byte[] getBytesUtf16Le(final String string)；
byte[] getBytesUtf8(final String string)；
字节数组至字符串
String newStringIso8859_1(final byte[] bytes)；
String newStringUsAscii(final byte[] bytes)；
String newStringUtf16(final byte[] bytes)；
String newStringUtf16Be(final byte[] bytes)；
String newStringUtf16Le(final byte[] bytes)；
String newStringUtf8(final byte[] bytes)；

class BaseNCodec
为BASE64,BASE32等的抽象父类，提供基本的encode（编码），decode（解码）接口方法
它是线程安全的，主要用于子类继承

class BaseNcodecInputStream
继承自FilterInputStream
为BASE64CodecInputStream，BASE32CodecInputStream抽象父类，提供
read（读入字节流，并编码），mark（定位当前输入流），skip（跳过并丢弃该输入流中的n字节数据）等方法
主要用于子类继承

class BaseNCodecOutputStream
继承自FilterOutputStream
为Base64CodecOutputStream，Base32CodecOutputStream抽象父类，提供
write（对输出字节流进行编码），flush（把缓冲区的内容强制的写出），close（关闭输出流）等方法
主要用于子类继承



class Base32
继承BaseNCodec类，实现endode，decode抽象方法。提供其BASE32编解码支持
encode，decode基本用法
Base32 base32=new Base32();
String str="xxxxx";
byte[] code=base32.encode(str.getBytes());
System.out.println(new String(code));//输出PB4HQ6DY
byte[] decoded=base32.decode(code);
System.out.println(new String(decoded));//输出xxxxx
其他编解码方法有encodeAsString(byte[])，encodeToString[byte]，decode(String）

class Base32InputStream
继承BaseNCodecInputStream类，对输入流进行Base32编码
基本用法：
File file=new File("");
Base32InputStream in=new Base32InputStream(new FileInputStream
			  (new File(file.getAbsolutePath()+"/src/domin/ByteUtils.java")), true);
byte[] buffer=new byte[512];
while(in.read(buffer)!=-1){
		 System.out.println(new String(buffer));
		 buffer=new byte[512];
}	  
in.close();






class Base32OutputStream


class Base64
继承BaseNCodec类，实现encode，decode抽象方法
除了父类提供的encode,decode，提供isBase64方法以提供对Base64编码的判别
一般使用其encodeBase64，decodeBase64静态方法
基本用法
String str="xxxxx";
byte[] code=Base64.encodeBase64(str.getBytes());//encode过程
System.out.println(new String(code));//输出eHh4eHg=
byte[] decoded=Base64.decodeBase64(code);//decode过程
System.out.println(new String(decoded));//输出xxxxx

class Base64InputStream
class Base64OutputSteam



